package parser

import (
	"bytes"
	"testing"

	"github.com/moggle-mog/goav/container/flv"
	"github.com/moggle-mog/goav/packet"

	"github.com/stretchr/testify/assert"
)

func TestNewCodecParser(t *testing.T) {
	at := assert.New(t)

	w := bytes.NewBuffer(nil)

	c := NewCodecParser()
	at.NotNil(c.SampleRate())
	at.NotNil(c.Parse(&packet.Packet{}, w))
}

func TestDemuxer_Demux(t *testing.T) {
	at := assert.New(t)
	d := flv.NewDemuxer()
	parse := NewCodecParser()
	buffer := bytes.NewBuffer(nil)

	// case1: 视频I帧起始
	p := packet.Packet{
		Type: packet.PktVideo,
		Data: []byte{
			0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		},
	}

	at.Nil(d.Demux(&p))
	at.Nil(parse.Parse(&p, buffer))

	at.Equal(4, buffer.Len())

	// case2: 视频I帧数据
	buffer.Reset()
	p = packet.Packet{
		Type: packet.PktVideo,
		Data: []byte{
			0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xd3, 0x65, 0x88, 0x80, 0x80, 0x03, 0x3f, 0xfe,
			0xf5, 0xf8, 0x45, 0x4f, 0x32, 0xcb, 0x1b, 0xb4,
			0x20, 0x3f, 0x85, 0x4d, 0xd6, 0x9b, 0xc2, 0xca,
			0x91, 0xb2, 0xbc, 0xe1, 0xfb, 0x35, 0x27, 0x44,
			0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x03, 0x00, 0x50, 0x99, 0x98,
			0x41, 0xd1, 0xaf, 0xd3, 0x24, 0xae, 0xa0, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x0f, 0x60, 0x00, 0x11,
			0xc0, 0x00, 0x1b, 0x40, 0x00, 0x4e, 0x40, 0x01,
			0x1f, 0x00, 0x03, 0xb8, 0x00, 0x10, 0x80, 0x00,
			0x59, 0x00, 0x02, 0x38, 0x00, 0x0b, 0xe0, 0x00,
			0x5e, 0x00, 0x02, 0x20, 0x00, 0x11, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x40, 0x41,
		},
	}

	at.Nil(d.Demux(&p))
	at.Nil(parse.Parse(&p, buffer))
	at.Equal(221, buffer.Len())

	// case3: 音频元数据
	buffer.Reset()
	p = packet.Packet{
		Type: packet.PktAudio,
		Data: []byte{
			0xaf, 0x00, 0x12, 0x10,
		},
	}

	at.Nil(d.Demux(&p))
	at.Nil(parse.Parse(&p, buffer))
	at.Equal(0, buffer.Len())

	// case4: 音频媒体数据
	buffer.Reset()
	p = packet.Packet{
		Type: packet.PktAudio,
		Data: []byte{
			0xaf, 0x01, 0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80,
		},
	}

	at.Nil(d.Demux(&p))
	at.Nil(parse.Parse(&p, buffer))
	at.Equal(16, buffer.Len())

	n, err := parse.SampleRate()
	at.Nil(err)
	at.Equal(44100, n)

	// case5: 音频数据
	buffer.Reset()
	p = packet.Packet{
		Type: packet.PktAudio,
		Data: []byte{
			0xaf, 0x01, 0x21, 0x4e, 0xfe, 0x91, 0xae, 0xf1,
			0x66, 0x4b, 0xa9, 0x2e, 0x40, 0xb9, 0x02, 0xa5,
			0xc8, 0x23, 0x2e, 0x38, 0xca, 0xbd, 0x56, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x20, 0x14, 0x2d, 0xc7,
			0xf3, 0x6c, 0xff, 0xb0, 0x01, 0x51, 0x1a, 0xfe,
			0x4f, 0x7f, 0xe5, 0x7d, 0xa8, 0x05, 0xcf, 0x69,
			0x3e, 0x6a, 0xe2, 0xfa, 0x90, 0x02, 0x2b, 0xe3,
			0xf5, 0x5c, 0xfe, 0xec, 0x00, 0xc1, 0xdc, 0x23,
			0xf1, 0x7c, 0xd0, 0x00, 0x00, 0x8d, 0x78, 0x7c,
			0x0e, 0xd3, 0x1d, 0x7a, 0xf9, 0xbc, 0x8e, 0x48,
			0x00, 0x00, 0x2e, 0x2e, 0xf5, 0xf6, 0x47, 0x2f,
			0x57, 0x4b, 0xbf, 0x00, 0x00, 0x00, 0x01, 0x61,
			0xd1, 0xd5, 0xd7, 0xd2, 0xbe, 0xcd, 0x77, 0xf9,
			0xde, 0x40, 0x00, 0x00, 0x00, 0x58, 0x65, 0x18,
			0x5e, 0xed, 0x0d, 0x4e, 0xa3, 0x4f, 0xbc, 0xdd,
			0xae, 0x00, 0x00, 0x10, 0x1f, 0x81, 0x8e, 0xff,
			0x8f, 0xff, 0xb6, 0xfe, 0x2f, 0x51, 0x16, 0xfb,
			0x32, 0x5c, 0xa9, 0x74, 0xa4, 0x0b, 0x95, 0x21,
			0x09, 0x14, 0x94, 0x00, 0x00, 0x00, 0x00, 0x10,
			0x1c, 0x19, 0xbf, 0x25, 0xf7, 0x1e, 0x7f, 0xe1,
			0x00, 0x01, 0x84, 0x77, 0x0f, 0x0f, 0xdd, 0x3d,
			0xe7, 0xd8, 0xbe, 0x56, 0x00, 0x73, 0x57, 0x23,
			0xf1, 0x3d, 0x1f, 0x5c, 0x01, 0x71, 0xb7, 0x4c,
			0xff, 0x4e, 0x00, 0x04, 0xe5, 0xc4, 0xeb, 0x3e,
			0x5f, 0x56, 0x00, 0x01, 0x86, 0x05, 0x6f, 0xd9,
			0x7d, 0x5f, 0xc3, 0xc7, 0x97, 0xca, 0xd6, 0xd2,
			0xcc, 0x00, 0x00, 0x34, 0x3a, 0xbe, 0x1f, 0x1e,
			0xbf, 0x1c, 0x34, 0x00, 0x00, 0x00, 0x2f, 0x39,
			0xc1, 0x8e, 0xfc, 0x37, 0xef, 0xd7, 0xcf, 0x18,
			0xe9, 0xe3, 0xfa, 0xdd, 0x57, 0x9f, 0x97, 0xe1,
			0x00, 0x00, 0x00, 0x1b, 0xd8, 0xa5, 0x4c, 0xd2,
			0x23, 0xa7, 0xab, 0xec, 0xbe, 0xde, 0x1f, 0xc7,
			0x87,
		},
	}

	at.Nil(d.Demux(&p))
	at.Nil(parse.Parse(&p, buffer))
	at.Equal(262, buffer.Len())

	n, err = parse.SampleRate()
	at.Nil(err)
	at.Equal(44100, n)
}
